//template routine Java
package routines;
import java.text.FieldPosition;
import java.text.SimpleDateFormat;
import java.util.regex.*;
import java.util.Calendar;
import java.util.Date;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;

/*
 * user specification:
 * the function's comment should contain keys as follows:
 * 1. write about the function's comment.but it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of:
 *                                               String, 
 *                                               char | Character, 
 *                                               long | Long, 
 *                                               int | Integer,
 *                                               boolean | Boolean,
 *                                               byte | Byte,
 *                                               Date,
 *                                               double | Double,
 *                                               float | Float,
 *                                               Object,
 *                                               short | Short
 * 
 * 3. {Category} define a category for the Function.  it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 *      <type> 's value should be one of:
 *                  string,
 *                  int,
 *                  list,
 *                  double,
 *                  object,
 *                  boolean,
 *                  long,
 *                  char,
 *                  date.
 *      <name>'s value is the Function's parameter name.
 *  the {param} is optional. so if you the Function without the parameters. the {param} don't added.
 *  you can have many parameters for the Function.     
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class DwStringHandling {
    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */

	final static int fyfirst = 4;
	final static int fysecond = 1;
	final static int fythird = 2;
	final static int fyfourth = 3;
	public static Calendar cal = Calendar.getInstance();
	static SimpleDateFormat MMddyyyy = new SimpleDateFormat("MM/dd/yyyy");
	static SimpleDateFormat yyyy = new SimpleDateFormat("yyyy");
	
    public static void helloExample(String message) {
        if (message == null) {
            message = "World";
        }
        System.out.println("Hello "+message+" !");
    }
    
    public static boolean isEmpty(String input){
    	Pattern p = Pattern.compile("[A-Z|a-z]|[\\s]");
    	if( null != input){
    		Matcher m = p.matcher(input.trim());
    		return m.find();
    	}else{
    		return false;
    	}
    }
    
    
    
    public static Integer getYear(java.util.Date d){
    	cal.setTime(d);
       	int year = cal.get(Calendar.YEAR);
       	return Integer.valueOf(year);
    }
    
    public static Integer getMonth(java.util.Date d){
    	cal.setTime(d);
       	int month = cal.get(Calendar.MONTH)+1;
    	return Integer.valueOf(month);
    }
    
    public static Integer getDay(java.util.Date d){
       	cal.setTime(d);
       	int day = cal.get(Calendar.DATE);
    	return Integer.valueOf(day);
    }
   
    public static int getDayOfWeek(java.util.Date d){
    	cal.setTime(d);
        int dow = cal.get(Calendar.DAY_OF_WEEK);
    	return dow;
    }
    
    public static int getWeek(java.util.Date d){
    	cal.setTime(d);
        int wom = cal.get(Calendar.WEEK_OF_MONTH);
    	return wom;
    }
    
    public static int getFiscalQuarter(Date d){
	
		cal.setTime(d);
		int q = (cal.get(Calendar.MONTH)+3)/3;
		if(q == fyfirst)
			return 1;
		else if(q == fysecond)
			return 2;
		else if(q == fythird)
			return 3;
		else
			return 4;
	}
    
    public static int getQuarter(Date d){
		
		cal.setTime(d);
		int q = (cal.get(Calendar.MONTH)+3)/3;
		if(q == 1)
			return 1;
		else if(q == 2)
			return 2;
		else if(q == 3)
			return 3;
		else
			return 4;
	}
    
    public static Timestamp getTimestamp(String pattern,Date d){
    	Timestamp retVal = null;
   		if (d != null) {
   			try {
   				pattern = pattern.replace("CC", "yy");
   		        pattern = pattern.replace("YY", "yy");
   		        pattern = pattern.replace("MM", "MM");
   		        pattern = pattern.replace("DD", "dd");
   		        pattern = pattern.replace("HH", "hh");
   		        pattern = pattern.replace("mm", "mm");
   		        pattern = pattern.replace("a", "a");

   		        SimpleDateFormat sdf = new SimpleDateFormat(pattern);
   		        String df= sdf.format(d);
   		        retVal = new Timestamp(sdf.parse(df).getTime());
   			}
   			catch (Exception e) {
   				retVal = null;
   			}
   		}
   		return(retVal);
    }
    
    public static String getDate(String pattern, Date date) {
        
        pattern = pattern.replace("CC", "yy");
        pattern = pattern.replace("YY", "yy");
        pattern = pattern.replace("MM", "MM");
        pattern = pattern.replace("DD", "dd");
        pattern = pattern.replace("HH", "hh");
        pattern = pattern.replace("mm", "mm");
        pattern = pattern.replace("a", "a");

        SimpleDateFormat sdf = new SimpleDateFormat(pattern);
        String result = sdf.format(date);
        return result.toString();
    }
    
    public static Integer getFiscalYear(java.util.Date d){
    	//Calendar cal = Calendar.getInstance();
       	cal.setTime(d);
       	Timestamp cutoff = convertDateStringToTimestamp("10/01/" + yyyy.format(d));
       	if(d.equals(cutoff) || d.after(cutoff) ){
       		cal.add(Calendar.YEAR,1);
       	}
       	int year = cal.get(Calendar.YEAR);
       	return Integer.valueOf(year);
    }
    
    
    public static Timestamp convertDateStringToTimestamp(String aDateString) {
		Timestamp retVal = null;
   		if (aDateString != null) {
   			try {
   				if (aDateString.length() == 10)
   					retVal = new Timestamp(MMddyyyy.parse(aDateString).getTime());
   			}
   			catch (Exception e) {
   				retVal = null;
   			}
   		}
   		return(retVal);
	}
	
}
