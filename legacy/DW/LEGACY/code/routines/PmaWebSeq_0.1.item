// template routine Java
package routines;

import java.sql.CallableStatement;
import java.sql.SQLException;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class PmaWebSeq {

    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
	/**
     * nextSeq: return next sequence from database dw_seq
     * 
     * 
     * {talendTypes} long | Long
     * 
     * {Category} User Defined
     * 
     * 
     * {example} nextSeq() # 99999.
     */
	private static CallableStatement stmt = null;
	
    public static Long nextSeq() {
    	
    	Long retVal;
    	java.sql.ResultSet rs = null;
    	String query = "select WEB_INITIATIVES_SEQ.nextval from dual";
    	try {
    		java.sql.Connection conn = PmaWebParam.getConnection();
    		if( null == stmt){
    		 stmt = conn.prepareCall(query);
    		}
			rs = stmt.executeQuery();
	       	rs.next();
	    	retVal = Long.valueOf(rs.getLong(1));
	    	rs.close();
	    	
	    	return(retVal);
    	}
    	catch (SQLException se) {
    		se.printStackTrace();
    	}
    	
    	return(Long.valueOf(-1));
    }
}
